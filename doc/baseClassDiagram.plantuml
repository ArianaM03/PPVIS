@startuml
class НачалоСессии <<main, injector>>{
    + {static} void main()
    + Банкомат создать()
}

НачалоСессии ..> Банкомат : <<create>>
НачалоСессии ..> Картридер : <<create>>
НачалоСессии ..> ХранилищеБанкнот : <<create>>
НачалоСессии ..> Банкнота : <<create>>
НачалоСессии ..> Модель : <<create>>
НачалоСессии ..> Контроллер : <<create>>
НачалоСессии ..> Окно : <<create>>

class Пользователь <<abstract>>{
    + String фио
    + String номерТелефона
    + void добавитьКарту(карта: Карта)
}

class Карта{
    + String номерКарты
    + String пинКод
    + String фиоВладельца
    + String названиеБанка
    + String свв
    + String срокДействия
    + boolean заблокирована 
}

Пользователь "1" o-- "n" Карта: +карты

class Банкомат{
    + String личныйНомер
    + String название банка
    + String адрес 

    + void начатьРаботу()
}

class Модель <<model>>{
    + void ввестиКарту(карта: Карта)
    + void ввестиПин(пин: String)
    + void снятиеНаличных()
    + void поплнениеКартыНаличкой()
    + void проверкаБаланса()
    + void выпискаОперацийНаТелефон(номер: String)
    + void переводСредств(номерКарты: string, сумма: double)
    + void ввестиСумму(сумма: double)
    + void проверкаБанкоматаНаНаличиеСредств(денежнаяЯчейка: ДенежнаяЯчейкаб сумма: double)
    + void проверкаСредствНаКарте(карта: Карта, сумма: double)
}

Банкомат "1" *-- "1" Модель: +модель
Модель ..> Карта: <<use>>

class Контроллер <<controller>>{
    + void ввестиКарту(карта: Карта)
    + void вернутьКарту(карта: Карта)
    + void ввестиПин(пин: String)
    + void проверитьПин()
    + void блокировкаКарты(карта: Карта)
    + void снятиеНаличных()
    + void поплнениеКартыНаличкой()
    + void проверкаБаланса()
    + void выпискаОперацийНаТелефон(номер: String)
    + void переводСредств(номерКарты: string, сумма: double)
    + void ввестиСумму(сумма: double)
    + void проверкаБанкоматаНаНаличиеСредств(хранилищеБанкнот: ХранилищеБанкнот, сумма: double)
    + void проверкаСредствНаКарте(карта: Карта, сумма: double)
}


Контроллер --> "1" Модель: +модель
Банкомат "1" *-- "1" Контроллер: +контроллер

class Картридер{
    + void принятьКарту(карта: Карта)
    + void отдать карту()
}

class ХранилищеБанкнот{
    + банкноты List<int>
    + void выдатьСумму(сумма: int)
}

class Банкнота{
    + int номинал
}

enum Валюта{
BYN
}

Банкомат "1" *-- "1" Картридер: +картридер
Банкомат "1" *-- "1" ХранилищеБанкнот: +зранилищеБанкнот
ХранилищеБанкнот "1" --> "n" Банкнота: -банкнота
Банкнота "n" --> "1" Валюта: + валюта

class Окно <<UI>>{
    + void работаОкна(контроллер: Контроллер)
    + void информацияОбОкне(вид: ВидОкна)
    + ВидОкна получениеИнфы()
}

class Отображение{
    + void отобразить окно()
}

enum ВидОкна{
ВЫБОР_ОПЕРАЦИИ
ВВОД_ПИНА
ВВОД_СУММЫ
ВЕРНО
ОШИБКА
БЛОКИРОВКА_КАРТЫ

}

Окно ..> ВидОкна: <<use>>
Окно ..> Контроллер: <<use>>
Окно "1" *-- "n" Отображение: -окно
Отображение "n" -->  "1" ВидОкна: +видОкна
Окно "1" --> "1" Отображение: +текущееОкно
Контроллер "1, -контроллер" -- "1, -отоброжение" Отображение
@enduml
